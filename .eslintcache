[{"E:\\PDB\\React\\apache-drill-fe\\src\\index.js":"1","E:\\PDB\\React\\apache-drill-fe\\src\\reportWebVitals.js":"2","E:\\PDB\\React\\apache-drill-fe\\src\\App.js":"3","E:\\PDB\\React\\apache-drill-fe\\src\\containers\\Home.jsx":"4","E:\\PDB\\React\\apache-drill-fe\\src\\components\\RecoveredStats\\RecoveredStats.jsx":"5","E:\\PDB\\React\\apache-drill-fe\\src\\components\\AccumDeadRecoveredHospitalized\\AccumDeadRecoveredHospitalized.jsx":"6","E:\\PDB\\React\\apache-drill-fe\\src\\components\\DailyCases\\DailyCases.jsx":"7"},{"size":542,"mtime":1608470303404,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":195,"mtime":1608463940356,"results":"11","hashOfConfig":"9"},{"size":9643,"mtime":1608821621341,"results":"12","hashOfConfig":"9"},{"size":15888,"mtime":1608821696591,"results":"13","hashOfConfig":"9"},{"size":8348,"mtime":1608807270729,"results":"14","hashOfConfig":"9"},{"size":6082,"mtime":1608802174405,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"120cth6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"E:\\PDB\\React\\apache-drill-fe\\src\\index.js",[],["33","34"],"E:\\PDB\\React\\apache-drill-fe\\src\\reportWebVitals.js",[],"E:\\PDB\\React\\apache-drill-fe\\src\\App.js",[],"E:\\PDB\\React\\apache-drill-fe\\src\\containers\\Home.jsx",[],"E:\\PDB\\React\\apache-drill-fe\\src\\components\\RecoveredStats\\RecoveredStats.jsx",[],"E:\\PDB\\React\\apache-drill-fe\\src\\components\\AccumDeadRecoveredHospitalized\\AccumDeadRecoveredHospitalized.jsx",["35","36"],"import React, { Component } from \"react\";\r\nimport styles from './AccumDeadRecoveredHospitalized.module.css'\r\nimport {Card} from \"react-bootstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nfunction createData(komponen, valId, valSlc) {\r\n    return { komponen, valId, valSlc };\r\n}\r\n\r\nfunction createDataIndonesiaOnly(komponen, valId) {\r\n    return { komponen, valId };\r\n}\r\n\r\nconst rows = (props) => {\r\n    // console.log(\">>>rows<<<\");\r\n    // console.log(props);\r\n    // console.log(props.allDataIndonesia.length)\r\n    // console.log(props.allDataSelected.length)\r\n    if (props.allDataIndonesia.length !== 0 && props.allDataSelected.length !== 0) {\r\n        const data = [\r\n            createData('Confirmed', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalConfirmed), checkDataAvailabilityDeathsHospitalised(props.allDataSelected[props.allDataSelected.length - 1].TotalConfirmed)),\r\n            createData('Recovered', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalRecovered), checkDataAvailability(props.listAPIRecovered, props.selectedName)),\r\n            createData('Dead', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalDeaths), checkDataAvailabilityDeathsHospitalised(props.allDataSelected[props.allDataSelected.length - 1].TotalDeaths)),\r\n            createData('Hospitalized', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalHospitalized), checkDataAvailabilityDeathsHospitalised(props.allDataSelected[props.allDataSelected.length - 1].TotalHospitalised))\r\n        ];\r\n        return data;\r\n    }\r\n}\r\n\r\nconst rowsIndonesiaOnly = (props) => {\r\n    if (props.allDataIndonesia.length !== 0) {\r\n        return [\r\n            createDataIndonesiaOnly('Confirmed', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalConfirmed)),\r\n            createDataIndonesiaOnly('Recovered', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalRecovered)),\r\n            createDataIndonesiaOnly('Dead', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalDeaths)),\r\n            createDataIndonesiaOnly('Hospitalized', checkDataAvailabilityDeathsHospitalised(props.allDataIndonesia[props.allDataIndonesia.length - 1].TotalHospitalized))\r\n        ];\r\n    }\r\n}\r\n\r\nconst checkDataAvailability = (data, name) => {\r\n    let number = \"No Data\";\r\n    for (let i = 0; i < data.length; i++) {\r\n        // console.log(data[i].country)\r\n        if (name === data[i].country) {\r\n            number = data[i].recovered\r\n            return number\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\nconst checkDataAvailabilityDeathsHospitalised = (data) => {\r\n    let number = \"No Data\";\r\n    if (data !== undefined && data !== \"\") {\r\n        number = parseInt(data)\r\n        return number\r\n    }\r\n    return number\r\n}\r\n\r\nclass AccumDeadRecoveredHospitalized extends Component {\r\n    // constructor(props)\r\n    // {\r\n    //     super(props);\r\n    //     this.state = { data : rows(this.props)};\r\n    // }\r\n    // state = {\r\n    //     data: rows(this.props)\r\n    // }\r\n    state = {\r\n        data: []\r\n    }\r\n\r\n    // checkSelectedAvailability = (data) => {\r\n    //     if (data.length !== 0) {\r\n    //         this.setState({\r\n    //             data: rows(data)\r\n    //         }, () =>\r\n    //             console.log(this.state.data))\r\n    //     }\r\n    //     return this.state.data\r\n    // }\r\n\r\n    render() {\r\n        // console.log(\"data tabel <<<<<\")\r\n        // console.log(rows(this.props))\r\n        // console.log(\"<<< props <<<\")\r\n        // console.log(rows(this.props))\r\n        // console.log(this.props)\r\n        // console.log(this.state.data)\r\n        // console.log()\r\n        // console.log(this.props.listAPIRecovered)\r\n        // console.log(this.props.selectedName)\r\n        // console.log(this.props.allDataSelected)\r\n        // console.log(checkDataAvailabilityDeathsHospitalised(this.props.allDataSelected[this.props.allDataSelected.length - 1]))\r\n        if (this.props.allDataSelected.length === 0) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Card style={{marginBottom: \"2rem\"}}>\r\n                        <Card.Header style={{fontWeight: \"550\", fontSize: \"20px\"}}>Other Stats</Card.Header>\r\n                        <Card.Body>\r\n                            <TableContainer component={Paper}>\r\n                                <Table aria-label=\"simple table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Statistics</TableCell>\r\n                                            <TableCell align=\"right\">Indonesia</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {rowsIndonesiaOnly(this.props).map((data) => (\r\n                                            <TableRow key={data.komponen}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {data.komponen}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">{data.valId}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </React.Fragment>\r\n            )\r\n        } else {\r\n            return (\r\n                <React.Fragment>\r\n                    <Card style={{marginBottom: \"2rem\"}}>\r\n                        <Card.Header style={{fontWeight: \"550\", fontSize: \"20px\"}}>Other Stats</Card.Header>\r\n                        <Card.Body>\r\n                            <TableContainer component={Paper}>\r\n                                <Table aria-label=\"simple table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Statistics</TableCell>\r\n                                            <TableCell align=\"right\">Indonesia</TableCell>\r\n                                            <TableCell align=\"right\">{this.props.selectedName}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {rows(this.props).map((data) => (\r\n                                            <TableRow key={data.komponen}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {/*{console.log(data.komponen)}*/}\r\n                                                    {data.komponen}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">{data.valId}</TableCell>\r\n                                                <TableCell align=\"right\">{data.valSlc}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default AccumDeadRecoveredHospitalized;","E:\\PDB\\React\\apache-drill-fe\\src\\components\\DailyCases\\DailyCases.jsx",["37","38","39","40"],"import React, { Component } from \"react\";\r\nimport styles from './DailyCases.module.css'\r\nimport {Card} from \"react-bootstrap\";\r\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\n// import moment from \"moment\";\r\n\r\n// Karena pas buka page awal belum ada props buat yang selected, bakal bikin conditional rendering\r\n// Conditional rendering buat kalau belum ada props selected sama udah ada\r\n// Oleh karena itu, dataToShow dipecah jadi 2. Ada dataToShowBoth untuk isi data ketika selected dan indonesia udah ada\r\n// Ada juga dataToShow aja yang cuma isi data indonesia aja\r\nconst dataToShowBoth = (props) => {\r\n\r\n    const list = [];\r\n    // if (props.dailyIndonesia === undefined || props.dailySelected === undefined) {\r\n    //     return \"data is not ready\"\r\n    // }\r\n    props.dailyIndonesia.map((ind) => {\r\n        props.dailySelected.map((scl) => {\r\n            if (ind.Tanggal === scl.Tanggal) {\r\n                if (ind.NewConfirmed === \"\") {\r\n                    list.push({\r\n                        // name: moment(obj.date).format(\"DD-MM-YYYY\"),\r\n                        date:ind.Tanggal,\r\n                        indonesia: 0,\r\n                        selected : parseInt(scl.NewConfirmed)\r\n                    })\r\n                } else if (scl.NewConfirmed === \"\") {\r\n                    list.push({\r\n                        // name: moment(obj.date).format(\"DD-MM-YYYY\"),\r\n                        date:ind.Tanggal,\r\n                        indonesia: parseInt(ind.NewConfirmed),\r\n                        selected : 0\r\n                    })\r\n                } else if (scl.NewConfirmed === \"\" && ind.NewConfirmed === \"\") {\r\n                    list.push({\r\n                        // name: moment(obj.date).format(\"DD-MM-YYYY\"),\r\n                        date:ind.Tanggal,\r\n                        indonesia: 0,\r\n                        selected : 0\r\n                    })\r\n                } else {\r\n                    list.push({\r\n                        // name: moment(obj.date).format(\"DD-MM-YYYY\"),\r\n                        date:ind.Tanggal,\r\n                        indonesia: parseInt(ind.NewConfirmed),\r\n                        selected : parseInt(scl.NewConfirmed)\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    })\r\n    // console.log(\"After mapping\");\r\n    // console.log(list);\r\n    return list;\r\n}\r\n\r\nconst dataToShow = (props) => {\r\n\r\n    const list = [];\r\n\r\n    props.dailyIndonesia.map((ind) => {\r\n        if (ind.NewConfirmed === \"\") {\r\n            list.push({\r\n                date:ind.Tanggal,\r\n                indonesia: 0,\r\n            })\r\n        } else {\r\n            list.push({\r\n                date:ind.Tanggal,\r\n                indonesia: parseInt(ind.NewConfirmed),\r\n            })\r\n        }\r\n    })\r\n    return list;\r\n}\r\n// const selectedName = \"Selected's total case\";\r\nclass DailyCases extends Component {\r\n    render() {\r\n        // console.log(\"this is daily\")\r\n        // console.log(this.props.indonesiaCode)\r\n        // console.log(this.props.selectedCode)\r\n        // console.log(this.props.dailyIndonesia)\r\n        // console.log(this.props.dailySelected)\r\n        if (this.props.dailySelected === undefined || this.props.dailySelected.length === 0) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div style={{ paddingBottom: \"1rem\"}}>\r\n                        <Card>\r\n                            <Card.Header style={{fontWeight: \"550\", fontSize: \"20px\"}}>Daily Cases</Card.Header>\r\n                            <Card.Body style={{ minHeight: \"100\"}}>\r\n                                <ResponsiveContainer width=\"100%\" height={480}>\r\n                                    <LineChart width={730} height={250} data={dataToShow(this.props)}\r\n                                               margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                        <XAxis dataKey=\"date\" />\r\n                                        <YAxis />\r\n                                        <Tooltip />\r\n                                        <Legend />\r\n                                        <Line type=\"monotone\" dataKey=\"indonesia\" name=\"Indonesia's daily case\" stroke=\"#8884d8\" />\r\n                                    </LineChart>\r\n                                </ResponsiveContainer>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <React.Fragment>\r\n                    <div style={{ paddingBottom: \"1rem\"}}>\r\n                        <Card>\r\n                            <Card.Header style={{fontWeight: \"550\", fontSize: \"20px\"}}>Daily Cases</Card.Header>\r\n                            <Card.Body style={{ minHeight: \"100\"}}>\r\n                                <ResponsiveContainer width=\"100%\" height={480}>\r\n                                    <LineChart data={dataToShowBoth(this.props)}\r\n                                               margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                        <XAxis dataKey=\"date\" />\r\n                                        <YAxis />\r\n                                        <Tooltip />\r\n                                        <Legend />\r\n                                        <Line type=\"monotone\" dataKey=\"indonesia\" name=\"Indonesia\" stroke=\"#8884d8\" />\r\n                                        <Line type=\"monotone\" dataKey=\"selected\" name={this.props.selectedName} stroke=\"#82ca9d\" />\r\n                                    </LineChart>\r\n                                </ResponsiveContainer>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default DailyCases;",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":14},{"ruleId":"45","severity":1,"message":"49","line":4,"column":10,"nodeType":"47","messageId":"48","endLine":4,"endColumn":20},{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":14},{"ruleId":"50","severity":1,"message":"51","line":17,"column":36,"nodeType":"52","messageId":"53","endLine":17,"endColumn":38},{"ruleId":"50","severity":1,"message":"51","line":18,"column":39,"nodeType":"52","messageId":"53","endLine":18,"endColumn":41},{"ruleId":"50","severity":1,"message":"51","line":61,"column":36,"nodeType":"52","messageId":"53","endLine":61,"endColumn":38},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]